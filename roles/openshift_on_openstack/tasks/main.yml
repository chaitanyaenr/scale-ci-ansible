---
# Remove all old directories and files.
- name: Removing any old directories or files from previous attempts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ openstack_rc }}"
    - "openshift-ansible"
    # - "openshift-ansible-contrib"
    - "inventory"
    - "ansible.cfg"

# Check if the server contains the openshift-ansible code already.
- name: Checking file system status for the openshift-ansible directory
  stat:
    get_checksum: no
    get_md5: no
    path: "/root/openshift-ansible"
  become: true
  register: openshift_ansible

# Copy the openshift-ansible files to the user's home directory.
- name: "Copying the openshift-ansible files to {{ ansible_user_dir }}/openshift-ansible"
  # Note: The copy module does not support recurisve copy of remote sources.
  command: "cp -a /root/openshift-ansible/ {{ ansible_user_dir }}/openshift-ansible"
  become: true
  #when: openshift_ansible['stat']['exists']
  when: false

# Change the permissions to be owned by the user.
- name: Changing the permission of the openshift-ansible files
  file:
    path: "{{ ansible_user_dir }}/openshift-ansible"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  become: true
  #when: openshift_ansible['stat']['exists']
  when: false

# Print the values that will be used for the openshift-ansible repository.
- name: Printing the values used to clone openshift-ansible
  debug:
    msg: "openshift-ansible repository: {{ openshift_ansible_repo }} {{ openshift_ansible_version }}"
  #when: openshift_ansible['stat']['exists'] == false

# Get a fresh clone of the openshift-ansible GitHub project.
- name: Cloning the openshift-ansible repository
  git:
    dest: "{{ ansible_user_dir }}/openshift-ansible"
    # Specify the repo as a variable to test other people's repositories.
    repo: "{{ openshift_ansible_repo }}"
    # Specify a version for a different branch, tag, or hash to verify PRs.
    version: "{{ openshift_ansible_version }}"
  #when: openshift_ansible['stat']['exists'] == false

# # Print the values that will be used for openshift-ansible-contrib.
# - name: Printing the values used to clone openshift-ansible-contrib
#   debug:
#     msg: "openshift-ansible-contrib repository: {{ openshift_ansible_contrib_repo }} {{ openshift_ansible_contrib_version }}"
#
# # Get a fresh clone of the openshift-ansible-contrib GitHub project.
# - name: Cloning the openshift-ansible-contrib repository
#   git:
#     dest: "{{ ansible_user_dir }}/openshift-ansible-contrib"
#     # Specify the repo as a variable to test other people's repositories.
#     repo: "{{ openshift_ansible_contrib_repo }}"
#     # Specify a version for a different branch, tag, or hash to verify PRs.
#     version: "{{ openshift_ansible_contrib_version }}"
#
# Set the openshift-ansbile openstack path.
- name: Creating the openshift_openstack directory variable
  set_fact:
    openshift_openstack_dir: "openshift-ansible/playbooks/openstack"

# # Install the ansible-galaxy requirements.
# - name: Running the ansible-galaxy install command
#   command: "ansible-galaxy install -r {{ openshift_openstack_dir }}/galaxy-requirements.yaml -p openshift-ansible-contrib/roles"

# Copy the remote sample-inventory to another remote directory.
- name: Copying the sample inventory directory
  # Note: The copy module does not support recurisve copy of remote sources.
  command: cp -a {{ openshift_openstack_dir }}/sample-inventory/ inventory

# Copy the Ansible configuration file from the openshift-ansible repository.
- name: Copying the Ansible configuration file from openshift-ansible
  copy:
    remote_src: true
    src: "openshift-ansible/ansible.cfg"
    dest: ./ansible.cfg

# Create a .ssh directory if one does not already exist.
- name: Creating the {{ ansible_user_dir }}/.ssh directory on the target host
  file:
    path: "{{ ansible_user_dir }}/.ssh"
    state: directory
    mode: 0700

# Copy the private key so this user can access the OpenShift servers.
- name: Copying the private key to the target host
  copy:
    src: "{{ ansible_private_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
    mode: 0600

# Copy the public key to the target host.
- name: Copying the public key to the target host
  copy:
    src: "{{ ansible_public_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
    mode: 0644

# Copy the OpenStack rc file from the Ansible host to the target host.
- name: Copying the OpenStack rc file from Ansible host to target host
  copy:
    src: "{{ playbook_dir }}/openstackrc"
    dest: "{{ openstack_rc }}"

# For each item in the list, search for regular expressions and replace.
- name: Replacing specific lines in inventory/group_vars/all.yml
  lineinfile:
    path: inventory/group_vars/all.yml
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items: "{{ all_yml }}"

# For each item in the list, search for regular expressions and replace.
- name: Replacing specific lines in inventory/group_vars/OSEv3.yml
  lineinfile:
    path: inventory/group_vars/OSEv3.yml
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items: "{{ osev3_yml }}"

# Add more configuration to the end of the OSEv3 file.
- name: Adding a block of configuration to the end of inventory/group_vars/OSEv3.yml
  blockinfile:
    backup: yes
    block: "{{ lookup('file', 'templates/add_block.yml') }}"
    insertafter: EOF
    path: inventory/group_vars/OSEv3.yml

# Set a variable for the ansible-playbook.
- name: Setting the ansible-playbook variable
  set_fact:
    ansible_playbook: "source {{ openstack_rc }}; ansible-playbook"

# Get some debug information that makes it easier to file bugs.
- name: Running commands that create debug information needed to open issues
  shell: "{{ item }}"
  register: debug_information
  with_items:
    - "printf \"$(uname -srm)\n$(cat /etc/os-release)\n\""
    - "ansible --version"
    # - "pip freeze | grep -i jinja"
    # - "pip freeze | grep -i shade"
    - "cd openshift-ansible ; git describe"
    - "rpm -q atomic-openshift-utils openshift-ansible"
  changed_when: false
  ignore_errors: true

# Print the debug information out.
- name: Printing the debug information to the screen
  debug:
    msg: "{{ item['stdout_lines'] }}"
  with_items: "{{ debug_information['results'] }}"

# Set the path for the OpenShift install log file.
- name: Creating the OpenShift instal log file variable
  set_fact:
    openshift_install_log: "{{ ansible_user_dir }}/openshift_install.log"

# Run the Ansible playbook that creates the OpenStack resources.
- name: Creating the OpenStack resources
  shell: "{{ ansible_playbook }} -vvv --user openshift -i inventory {{ openshift_openstack_dir }}/openshift-cluster/provision_install.yml -e openshift_repos_enable_testing=true 2>&1 > {{ openshift_install_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Render the time server configuration file and copy it to the target-host.
- name: Rendering the time server configuration file to the target-host
  template:
    src: chrony.conf.j2
    dest: "{{ ansible_user_dir }}/chrony.conf"

# Copy the configure_time_servers.yml playbook to the target-host.
- name: Copying the configure_time_servers.yml playbook to the target-host
  copy:
    src: templates/configure_time_servers.yml
    dest: "{{ ansible_user_dir }}/configure_time_servers.yml"

# Set the path for the OpenStack provision log file.
- name: Creating the time servers log file variable
  set_fact:
    time_servers_log: "{{ ansible_user_dir }}/time_servers.log"

# Configure the time servers on all the provisioned nodes.
- name: Configuring the time servers on all the provisioned nodes
  shell: "{{ ansible_playbook }} -vv -i inventory configure_time_servers.yml 2>&1 >> {{ time_servers_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# # Set the path for the OpenShift install log file.
# - name: Creating the OpenShift instal log file variable
#   set_fact:
#     openshift_install_log: "{{ ansible_user_dir }}/openshift_install.log"
#
# # Run the Ansible playbook that installs OpenShift.
# - name: Running the OpenShift install
#   shell: "{{ ansible_playbook }} -vvv openshift-ansible/playbooks/byo/config.yml 2>&1 >> {{ openshift_install_log }}"
#   args:
#     # Use bash to get the posix style redirects.
#     executable: /bin/bash
#   register: openshift_install
#   until: openshift_install['rc'] == 0
#   retries: 2
#   delay: 1

# Print out the log file locations.
- name: Printing out the log file locations
  debug:
    msg: "Check {{ openshift_install_log }} for more details on the install process."

# The openstack variable includes the rc file and the path to the OpenStack client.
- name: Setting openstack variable to source the rc file and contain path to client
  set_fact:
    openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

# Get the addresses of a master vm.
- name: Getting the IP address of a master
  shell: "{{ openstack }} server show master-0.scale-ci.example.com --format value -c addresses"
  register: address

# Parse the second address from the addresses field.
- name: Parsing the floating ip address from the addresses field
  set_fact:
    # "openshift-ansible-scale-ci.example.com-net=192.168.99.17, 172.21.0.129"
    master_address: "{{ address['stdout'].split(', ')[1] }}"
  failed_when: master_address == ""

# Add the master host address to the properties file.
- name: Adding the MASTER_HOST to the properties file
  lineinfile:
    line: "MASTER_HOST={{ master_address }}"
    path: "{{ properties_file }}"
  delegate_to: localhost

# Add the master user to the properties file.
- name: Adding the MASTER_USER to the properties file
  lineinfile:
    line: "MASTER_USER=openshift"
    path: "{{ properties_file }}"
  delegate_to: localhost

# Enable pbench in the properties file.
- name: Adding ENABLE_PBENCH to the properties file
  lineinfile:
    line: "ENABLE_PBENCH=True"
    path: "{{ properties_file }}"
  delegate_to: localhost

# Get the properties file contents.
- name: Reading the {{ properties_file }}
  set_fact:
    properties_contents: "{{ lookup('file', properties_file) }}"
  delegate_to: localhost

# Print the contents of the properties file.
- name: Printing the contents {{ properties_file }}
  debug:
    msg: "{{ properties_contents }}"
