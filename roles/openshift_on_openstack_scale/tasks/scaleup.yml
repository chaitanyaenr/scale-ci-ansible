---
# Get the pre-scale up OpenStack VMs by name.
- name: Getting the pre-scale up list of app-nodes
  shell: "{{ openstack }} server list --name app-node-[0-9]*.{{ clusterid }}.{{ dns_domain }} --format value -c Name -c Networks --limit -1"
  register: networks_old
  changed_when: false

# Search for regular expressions and replace in file.
- name: Replacing specific lines in {{ all_yml_path }}
  lineinfile:
    path: "{{ all_yml_path }}"
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items:
    - { find: "^#?openshift_openstack_num_nodes.*", replace: "openshift_openstack_num_nodes: {{ block['end']|int + 1 }}" }

# Set the path for the OpenShift provision log file.
- name: Creating the OpenShift provision log file variable
  set_fact:
    scaleup_provision_log: "{{ log_directory }}/scaleup_provision_resources_{{ block['end'] }}.log"

- block:
    # Run the Ansible playbook that creates the OpenStack resources.
    - name: Creating the OpenStack resources
      shell: >
        {{ ansible_playbook }} -vv
        --user openshift
        -i inventory
        -i {{ inventory_py }}
        {{ openshift_cluster_directory }}/provision_resources.yml 2>&1 >> {{ scaleup_provision_log }}
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash
  always:
    - name: Copy the log file to the artifacts directory
      synchronize:
        src: "{{ scaleup_provision_log }}"
        dest: "{{ artifacts_directory }}"
        mode: pull
        use_ssh_args: yes

# Get the post scale up OpenStack VMs by name.
- name: Getting the post scale up list of app-nodes
  shell: "{{ openstack }} server list --name app-node-[0-9]*.{{ clusterid }}.{{ dns_domain }} --format value -c Name -c Networks --limit -1"
  register: networks_new
  changed_when: false

# Create an empty list.
- name: Creating an empty list of new hosts
  set_fact:
    hosts_new: []
  run_once: true

# Creating a list of new host information.
- name: Creating a list of new hosts from the OpenStack networks output
  set_fact:
    # Example: app-node-90.scale-ci.example.com ci_network=192.168.0.99
    hosts_new: "{{ hosts_new }} + [{ 'fqdn': '{{ item.split(' ')[0] }}', 'name': '{{ item.split(' ')[0].split('.')[0] }}', 'private_ip': '{{ item.split('=')[1] }}' }]"
  with_items: "{{ networks_new.stdout_lines | difference(networks_old.stdout_lines) }}"

# Create the new nodes inventory file name
- name: Creating the file name for the new nodes inventory
  set_fact:
    new_nodes_inventory: "{{ ansible_user_dir }}/new_nodes_{{ block['begin'] }}-{{ block['end'] }}_inventory"

# Write the group name for the new nodes inventory file.
- name: Writing the group header for the new nodes inventory file
  copy:
    content: "[OSEv3:children]\nnew_nodes\n[new_nodes]\n"
    dest: "{{ new_nodes_inventory }}"

# Create the new inventory file
- name: Adding the addresses to the new nodes inventory file
  lineinfile:
    path: "{{ new_nodes_inventory }}"
    line: "{{ item['fqdn'] }} ansible_host={{ item['private_ip'] }} openshift_node_group_name=\"node-config-compute\""
  with_items: "{{ hosts_new }}"

# Add the new nodes to DNS.
- name: Adding the new VMs to DNS
  nsupdate:
    key_name: "{{ dns_key_name }}"
    key_secret: "{{ dns_key_secret }}"
    key_algorithm: "{{ dns_key_algorithm }}"
    server: "{{ cluster_dns_ip }}"
    zone: "{{ clusterid }}.{{ dns_domain }}"
    record: "{{ item['name'] }}"
    type: "A"
    value: "{{ item['private_ip'] }}"
    state: present
  with_items:
    - "{{ hosts_new | default([]) }}"
  register: nsupdate_add_result
  until: nsupdate_add_result is succeeded
  retries: 10

# Wait for the new nodes to respond to ssh
- name: Waiting for the new nodes to respond to ssh
  wait_for:
    delay: 1
    host: "{{ item['private_ip'] }}"
    port: 22
    state: started
    timeout: 120
  with_items: "{{ hosts_new }}"

# Set the path for the time servers log file.
- name: Creating the time servers log variable
  set_fact:
    scaleup_time_servers_log: "{{ log_directory }}/scaleup_time_servers_{{ block['end'] }}.log"

- block:
    # Configure the time servers on all the new nodes.
    - name: Configuring the time servers on the new nodes
      shell: >
        {{ ansible_playbook }} -vv
        --user openshift
        -i {{ new_nodes_inventory }}
        configure_time_servers.yml 2>&1 >> {{ scaleup_time_servers_log }}
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash
  always:
    - name: Copy the log file to the artifacts directory
      synchronize:
        src: "{{ scaleup_time_servers_log }}"
        dest: "{{ artifacts_directory }}"
        mode: pull
        use_ssh_args: yes

- name: Creating the OpenShift configure new nodes log variable
  set_fact:
    scaleup_configure_log: "{{ log_directory }}/scaleup_configure_new_nodes_{{ block['end'] }}.log"

- block:
    # Run through the few OpenStack specific configuration.
    - name: Configuring the new nodes
      shell: >
        {{ ansible_playbook }} -vv
        --user openshift
        -i {{ inventory_py }}
        -i {{ new_nodes_inventory }}
        -i inventory/
        {{ openshift_cluster_directory }}/configure-new-nodes.yml 2>&1 >> {{ scaleup_configure_log }}
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash
  always:
    - name: Copy the log file to the artifacts directory
      synchronize:
        src: "{{ scaleup_configure_log }}"
        dest: "{{ artifacts_directory }}"
        mode: pull
        use_ssh_args: yes

# Set the path to the scaleup_inventory.py file.
- name: Creating the scaleup_inventory.py variable
  set_fact:
    scaleup_inventory_py: "{{ ansible_user_dir }}/openshift-ansible/playbooks/openstack/scaleup_inventory.py"

# Set the path for the OpenShift scaleup log file.
- name: Creating the OpenShift scaleup log variable
  set_fact:
    scaleup_openshift_log: "{{ log_directory }}/scaleup_openshift_{{ block['end'] }}.log"

- block:
    # Scale up the OpenShift cluster.
    - name: Scaling up the OpenShift resources
      shell: >
        {{ ansible_playbook_scaleup }} -vv
        --user openshift
        -i inventory/
        -i {{ scaleup_inventory_py }}
        -i {{ new_nodes_inventory }}
        {{ openshift_cluster_directory }}/node-scaleup.yml 2>&1 >> {{ scaleup_openshift_log }}
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash

    - name: Scaling up the OpenShift resources and monitor using pbench
      shell: >
        pbench-user-benchmark
        --pbench-post='/usr/local/bin/pbscraper
        -i $benchmark_results_dir/tools-default
        -o $benchmark_results_dir;
        ansible-playbook -i {{ pbcompare_inventory }} {{ pbcompare_playbook }}
        -e new_file='$benchmark_results_dir/out.json''
        -- {{ ansible_playbook_scaleup }} -vv
        --user openshift
        -i inventory/
        -i {{ scaleup_inventory_py }}
        -i {{ new_nodes_inventory }}
        {{ openshift_cluster_directory }}/node-scaleup.yml 2>&1 >> {{ scaleup_openshift_log }}
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash
      when: use_pbench | default(False) | bool
  always:
    - name: Copy the log file to the artifacts directory
      synchronize:
        src: "{{ scaleup_openshift_log }}"
        dest: "{{ artifacts_directory }}"
        mode: pull
        use_ssh_args: yes
